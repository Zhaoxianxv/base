package com.yfy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEY_VALUE_DB".
*/
public class KeyValueDbDao extends AbstractDao<KeyValueDb, Long> {

    public static final String TABLENAME = "KEY_VALUE_DB";

    /**
     * Properties of entity KeyValueDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Model_type = new Property(0, String.class, "model_type", false, "MODEL_TYPE");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Type_id = new Property(2, String.class, "type_id", false, "TYPE_ID");
        public final static Property Type_parent_id = new Property(3, String.class, "type_parent_id", false, "TYPE_PARENT_ID");
        public final static Property Type_user_id = new Property(4, String.class, "type_user_id", false, "TYPE_USER_ID");
        public final static Property Term = new Property(5, String.class, "term", false, "TERM");
        public final static Property Key = new Property(6, String.class, "key", false, "KEY");
        public final static Property Value = new Property(7, String.class, "value", false, "VALUE");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Rank = new Property(10, String.class, "rank", false, "RANK");
        public final static Property Image = new Property(11, String.class, "image", false, "IMAGE");
        public final static Property Time = new Property(12, String.class, "time", false, "TIME");
        public final static Property File_path = new Property(13, String.class, "file_path", false, "FILE_PATH");
        public final static Property Parent_id = new Property(14, String.class, "parent_id", false, "PARENT_ID");
        public final static Property Child_id = new Property(15, String.class, "child_id", false, "CHILD_ID");
        public final static Property Key_value_id = new Property(16, String.class, "key_value_id", false, "KEY_VALUE_ID");
        public final static Property Num = new Property(17, int.class, "num", false, "NUM");
        public final static Property Time_duration = new Property(18, float.class, "time_duration", false, "TIME_DURATION");
        public final static Property Required = new Property(19, boolean.class, "required", false, "REQUIRED");
        public final static Property View_type = new Property(20, int.class, "view_type", false, "VIEW_TYPE");
        public final static Property Id = new Property(21, Long.class, "id", true, "_id");
    }


    public KeyValueDbDao(DaoConfig config) {
        super(config);
    }
    
    public KeyValueDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEY_VALUE_DB\" (" + //
                "\"MODEL_TYPE\" TEXT NOT NULL ," + // 0: model_type
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"TYPE_ID\" TEXT NOT NULL ," + // 2: type_id
                "\"TYPE_PARENT_ID\" TEXT NOT NULL ," + // 3: type_parent_id
                "\"TYPE_USER_ID\" TEXT NOT NULL ," + // 4: type_user_id
                "\"TERM\" TEXT NOT NULL ," + // 5: term
                "\"KEY\" TEXT NOT NULL ," + // 6: key
                "\"VALUE\" TEXT NOT NULL ," + // 7: value
                "\"NAME\" TEXT NOT NULL ," + // 8: name
                "\"TITLE\" TEXT NOT NULL ," + // 9: title
                "\"RANK\" TEXT NOT NULL ," + // 10: rank
                "\"IMAGE\" TEXT NOT NULL ," + // 11: image
                "\"TIME\" TEXT NOT NULL ," + // 12: time
                "\"FILE_PATH\" TEXT NOT NULL ," + // 13: file_path
                "\"PARENT_ID\" TEXT NOT NULL ," + // 14: parent_id
                "\"CHILD_ID\" TEXT NOT NULL ," + // 15: child_id
                "\"KEY_VALUE_ID\" TEXT NOT NULL ," + // 16: key_value_id
                "\"NUM\" INTEGER NOT NULL ," + // 17: num
                "\"TIME_DURATION\" REAL NOT NULL ," + // 18: time_duration
                "\"REQUIRED\" INTEGER NOT NULL ," + // 19: required
                "\"VIEW_TYPE\" INTEGER NOT NULL ," + // 20: view_type
                "\"_id\" INTEGER PRIMARY KEY );"); // 21: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEY_VALUE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyValueDb entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getModel_type());
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getType_id());
        stmt.bindString(4, entity.getType_parent_id());
        stmt.bindString(5, entity.getType_user_id());
        stmt.bindString(6, entity.getTerm());
        stmt.bindString(7, entity.getKey());
        stmt.bindString(8, entity.getValue());
        stmt.bindString(9, entity.getName());
        stmt.bindString(10, entity.getTitle());
        stmt.bindString(11, entity.getRank());
        stmt.bindString(12, entity.getImage());
        stmt.bindString(13, entity.getTime());
        stmt.bindString(14, entity.getFile_path());
        stmt.bindString(15, entity.getParent_id());
        stmt.bindString(16, entity.getChild_id());
        stmt.bindString(17, entity.getKey_value_id());
        stmt.bindLong(18, entity.getNum());
        stmt.bindDouble(19, entity.getTime_duration());
        stmt.bindLong(20, entity.getRequired() ? 1L: 0L);
        stmt.bindLong(21, entity.getView_type());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(22, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyValueDb entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getModel_type());
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getType_id());
        stmt.bindString(4, entity.getType_parent_id());
        stmt.bindString(5, entity.getType_user_id());
        stmt.bindString(6, entity.getTerm());
        stmt.bindString(7, entity.getKey());
        stmt.bindString(8, entity.getValue());
        stmt.bindString(9, entity.getName());
        stmt.bindString(10, entity.getTitle());
        stmt.bindString(11, entity.getRank());
        stmt.bindString(12, entity.getImage());
        stmt.bindString(13, entity.getTime());
        stmt.bindString(14, entity.getFile_path());
        stmt.bindString(15, entity.getParent_id());
        stmt.bindString(16, entity.getChild_id());
        stmt.bindString(17, entity.getKey_value_id());
        stmt.bindLong(18, entity.getNum());
        stmt.bindDouble(19, entity.getTime_duration());
        stmt.bindLong(20, entity.getRequired() ? 1L: 0L);
        stmt.bindLong(21, entity.getView_type());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(22, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21);
    }    

    @Override
    public KeyValueDb readEntity(Cursor cursor, int offset) {
        KeyValueDb entity = new KeyValueDb( //
            cursor.getString(offset + 0), // model_type
            cursor.getString(offset + 1), // type
            cursor.getString(offset + 2), // type_id
            cursor.getString(offset + 3), // type_parent_id
            cursor.getString(offset + 4), // type_user_id
            cursor.getString(offset + 5), // term
            cursor.getString(offset + 6), // key
            cursor.getString(offset + 7), // value
            cursor.getString(offset + 8), // name
            cursor.getString(offset + 9), // title
            cursor.getString(offset + 10), // rank
            cursor.getString(offset + 11), // image
            cursor.getString(offset + 12), // time
            cursor.getString(offset + 13), // file_path
            cursor.getString(offset + 14), // parent_id
            cursor.getString(offset + 15), // child_id
            cursor.getString(offset + 16), // key_value_id
            cursor.getInt(offset + 17), // num
            cursor.getFloat(offset + 18), // time_duration
            cursor.getShort(offset + 19) != 0, // required
            cursor.getInt(offset + 20), // view_type
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyValueDb entity, int offset) {
        entity.setModel_type(cursor.getString(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setType_id(cursor.getString(offset + 2));
        entity.setType_parent_id(cursor.getString(offset + 3));
        entity.setType_user_id(cursor.getString(offset + 4));
        entity.setTerm(cursor.getString(offset + 5));
        entity.setKey(cursor.getString(offset + 6));
        entity.setValue(cursor.getString(offset + 7));
        entity.setName(cursor.getString(offset + 8));
        entity.setTitle(cursor.getString(offset + 9));
        entity.setRank(cursor.getString(offset + 10));
        entity.setImage(cursor.getString(offset + 11));
        entity.setTime(cursor.getString(offset + 12));
        entity.setFile_path(cursor.getString(offset + 13));
        entity.setParent_id(cursor.getString(offset + 14));
        entity.setChild_id(cursor.getString(offset + 15));
        entity.setKey_value_id(cursor.getString(offset + 16));
        entity.setNum(cursor.getInt(offset + 17));
        entity.setTime_duration(cursor.getFloat(offset + 18));
        entity.setRequired(cursor.getShort(offset + 19) != 0);
        entity.setView_type(cursor.getInt(offset + 20));
        entity.setId(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KeyValueDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KeyValueDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KeyValueDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
